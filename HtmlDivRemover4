package test;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.util.regex.Pattern;

public class HtmlDivRemover4 {
    public static void main(String[] args) throws Exception {
        String htmlContent = "<html><body><div id='header'>Header</div><div id='cmnt2'>Comment 2</div><div id='content'>Content</div><div id='cmnt2'>Comment 2</div><div id='footer'>Footer</div></body></html>";
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        baos.write(htmlContent.getBytes());

        String divIdPattern = "cmnt2";
        ByteArrayOutputStream finalHtml = removeDivsByPattern(baos, divIdPattern);
        System.out.println(finalHtml);
    }

    public static ByteArrayOutputStream removeDivsByPattern(ByteArrayOutputStream baos, String pattern) throws Exception {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document document = builder.parse(new InputSource(new ByteArrayInputStream(baos.toByteArray())));

        NodeList divNodes = document.getElementsByTagName("div");
        Pattern regex = Pattern.compile(pattern);
        for (int i = divNodes.getLength() - 1; i >= 0; i--) {
            Element div = (Element) divNodes.item(i);
            String divId = div.getAttribute("id");
            if (regex.matcher(divId).matches()) {
                Node parent = div.getParentNode();
                parent.removeChild(div);
            }
        }

        ByteArrayOutputStream modifiedBaos = new ByteArrayOutputStream();
        Transformer transformer = TransformerFactory.newInstance().newTransformer();
        transformer.setOutputProperty(OutputKeys.INDENT, "no");
        transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
        transformer.transform(new DOMSource(document), new StreamResult(modifiedBaos));

        // 使用正则表达式替换掉所有的 \r\n
        String htmlOutput = modifiedBaos.toString().replaceAll("\\r\\n|\\r|\\n", "");
        ByteArrayOutputStream modifiedBaos2 = new ByteArrayOutputStream();
        modifiedBaos2.write(htmlOutput.getBytes());
        return modifiedBaos2;
    }
}
